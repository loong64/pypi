name: build (xmlsec)

on:
  workflow_dispatch:
    inputs:
      version:
        default: 'latest'
        description: 'Package version'
        type: string
        required: true
  schedule:
    - cron: '0 17 * * *'

jobs:
  build_wheels:
    name: Build ${{ matrix.python }}-${{ matrix.build }}${{ matrix.arch }} wheels
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [ 'loongarch64' ]
        build: [ 'manylinux_', 'musllinux_' ]
        python: [ 'cp38', 'cp39', 'cp310', 'cp311', 'cp312', 'cp313' ]


    steps:
      - name: Get Source Code
        run: |
          package=xmlsec
          if [ "${{ github.event_name }}" = "schedule" ]; then
            version="latest"
          else
            version=${{ github.event.inputs.version }}
          fi
          if [ "$version" = "latest" ]; then
            version=$(curl -sSL "https://pypi.org/pypi/${package}/json" | jq -r '.info.version')
          fi
          echo "Building package: ${package} version: ${version}"
          echo "PIP_EXTRA_INDEX_URL=https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple" >> $GITHUB_ENV

          if curl "https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple/${package/./-}" | grep -q "${package}-${version}-.*-${{ matrix.build }}.*_${{ matrix.arch }}.whl"; then
            echo "Package ${package} ${version} already exists"
            echo "BUILD=false" >> $GITHUB_ENV
            exit 0
          fi

          PYXMLSEC_LIBXML2_VERSION=$(curl -sSL https://github.com/xmlsec/python-xmlsec/raw/refs/tags/${version}/.github/workflows/wheels.yml | grep PYXMLSEC_LIBXML2_VERSION | grep -oP '\d+\.\d+\.\d+')
          PYXMLSEC_LIBXSLT_VERSION=$(curl -sSL https://github.com/xmlsec/python-xmlsec/raw/refs/tags/${version}/.github/workflows/wheels.yml | grep PYXMLSEC_LIBXSLT_VERSION | grep -oP '\d+\.\d+\.\d+')
          if [ -z "$PYXMLSEC_LIBXML2_VERSION" ] || [ -z "$PYXMLSEC_LIBXSLT_VERSION" ]; then
              echo "No libxml2/libxslt version found"
              exit 1
          fi
          echo "PYXMLSEC_LIBXML2_VERSION: ${PYXMLSEC_LIBXML2_VERSION}"
          echo "PYXMLSEC_LIBXSLT_VERSION: ${PYXMLSEC_LIBXSLT_VERSION}"
          echo "PYXMLSEC_LIBXML2_VERSION=${PYXMLSEC_LIBXML2_VERSION}" >> $GITHUB_ENV
          echo "PYXMLSEC_LIBXSLT_VERSION=${PYXMLSEC_LIBXSLT_VERSION}" >> $GITHUB_ENV

          full_json=$(curl -sSL "https://pypi.org/pypi/${package}/${version}/json")
          download_url=$(echo "$full_json" | jq -r '.urls[] | select(.packagetype=="sdist").url')
          if [ -z "$download_url" ]; then
              echo "No source found for package ${package} version ${version}"
              exit 1
          fi

          wget -O - "$download_url" | tar xz --strip-components=1

      - name: Setup QEMU
        if: env.BUILD != 'false'
        run: docker run --rm --privileged ghcr.io/loong64/qemu-user-static --reset -p yes

      - name: Build wheels
        if: env.BUILD != 'false'
        uses: loong64/cibuildwheel@main
        env:
          CIBW_ARCHS: "${{ matrix.arch }}"
          CIBW_BUILD: "${{ matrix.python }}-${{ matrix.build }}"
          CIBW_ENVIRONMENT_PASS_LINUX: PIP_EXTRA_INDEX_URL PYXMLSEC_LIBXML2_VERSION PYXMLSEC_LIBXSLT_VERSION

      - name: Check wheel
        run: |
          ls -al wheelhouse/*.whl || exit 0
          echo "upload=true" >> $GITHUB_ENV

      - name: Upload wheels
        if: env.upload == 'true'
        run: |
          pip install twine==6.0.1
          for file in wheelhouse/*.whl; do
            twine upload --repository-url https://gitlab.com/api/v4/projects/65746188/packages/pypi $file || true
          done
        env:
          TWINE_USERNAME: ${{ github.repository_owner }}
          TWINE_PASSWORD: ${{ secrets.GL_TOKEN }}