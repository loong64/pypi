name: build (cmake-legacy)

on:
  workflow_dispatch:
    inputs:
      version:
        default: 'latest'
        description: 'Package version'
        type: string
        required: true

jobs:
  build_wheels:
    name: Build ${{ matrix.build }}${{ matrix.arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: "loongarch64"
            build: "manylinux_"
          - os: ubuntu-latest
            arch: "loongarch64"
            build: "musllinux_"


    steps:
      - name: Get Source Code
        run: |
          package=cmake
          version=${{ github.event.inputs.version }}

          if [ "$version" = "latest" ]; then
            version=$(curl -sSL "https://pypi.org/pypi/${package}/json" | jq -r '.info.version')
          fi
          echo "Building package: ${package} version: ${version}"
          echo "PIP_EXTRA_INDEX_URL=https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple" >> $GITHUB_ENV

          full_json=$(curl -sSL "https://pypi.org/pypi/${package}/${version}/json")
          download_url=$(echo "$full_json" | jq -r '.urls[] | select(.packagetype=="sdist").url')
          if [ -z "$download_url" ]; then
              echo "No source found for package ${package} version ${version}"
              exit 1
          fi

          case "${{ matrix.build }}" in
            manylinux_)
              echo CIBW_SKIP="*-musllinux_loongarch64" >> $GITHUB_ENV
              ;;
            musllinux_)
              echo CIBW_SKIP="*-manylinux_loongarch64" >> $GITHUB_ENV
              ;;
          esac

          wget -O - "$download_url" | tar xz --strip-components=1

          sed -i 's/"\*-manylinux_s390x"/"\*-manylinux_s390x", "\*-manylinux_loongarch64"/g' pyproject.toml
          sed -i 's/"\*-musllinux_s390x"/"\*-musllinux_s390x", "\*-musllinux_loongarch64"/g' pyproject.toml

          mkdir -p scripts
          wget -O scripts/repair_wheel.py https://github.com/scikit-build/cmake-python-distributions/raw/refs/tags/${version}/scripts/repair_wheel.py
          if [ ! -f "requirements-repair.txt" ]; then
            wget https://github.com/scikit-build/cmake-python-distributions/raw/refs/tags/${version}/requirements-repair.txt
          fi
          if [ ! -f "scripts/utils.sh" ]; then
            wget -O scripts/utils.sh https://github.com/scikit-build/cmake-python-distributions/raw/refs/tags/${version}/scripts/utils.sh
          fi
          if [ ! -f "scripts/manylinux-build-and-install-openssl.sh" ]; then
            wget -O scripts/manylinux-build-and-install-openssl.sh https://github.com/scikit-build/cmake-python-distributions/raw/refs/tags/${version}/scripts/manylinux-build-and-install-openssl.sh
          fi
          sudo chmod +x scripts/utils.sh scripts/manylinux-build-and-install-openssl.sh

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build wheels
        uses: loong64/cibuildwheel@v2.23.2
        env:
          CIBW_ARCHS: "${{ matrix.arch }}"
          CIBW_BEFORE_ALL_LINUX: >
            pipx uninstall cmake &&
            (command -v apk && apk add perl-utils cmake) || true &&
            (command -v yum && yum -y install perl perl-IPC-Cmd cmake) || true &&
            ./scripts/manylinux-build-and-install-openssl.sh
          CIBW_BEFORE_BUILD_LINUX: >
            pip install -U pip scikit-build ninja &&
            pip install -r requirements-repair.txt
          CIBW_ENVIRONMENT_PASS_LINUX: PIP_EXTRA_INDEX_URL
          CIBW_TEST_SKIP: "*"

      - name: Check wheel
        run: |
          ls -al wheelhouse/*.whl || exit 0
          echo "upload=true" >> $GITHUB_ENV

      - name: Upload wheels
        if: env.upload == 'true'
        run: |
          pip install twine==6.0.1
          for file in wheelhouse/*.whl; do
            twine upload --repository-url https://gitlab.com/api/v4/projects/65746188/packages/pypi $file || true
          done
        env:
          TWINE_USERNAME: ${{ github.repository_owner }}
          TWINE_PASSWORD: ${{ secrets.GL_TOKEN }}