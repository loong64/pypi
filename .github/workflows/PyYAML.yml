name: build (PyYAML)

on:
  workflow_dispatch:
    inputs:
      version:
        default: 'latest'
        description: 'Package version'
        type: string
        required: true
  schedule:
    - cron: '0 17 * * *'

env:
  LIBYAML_REPO: 'https://github.com/yaml/libyaml'
  LIBYAML_REF: '0.2.5'

jobs:
  build_wheels:
    name: Build ${{ matrix.arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            arch: "loongarch64"
            build: "manylinux_"
            platform: "manylinux_2_38"
          - os: ubuntu-24.04
            arch: "loongarch64"
            build: "musllinux_"
            platform: "musllinux_1_2"


    steps:
      - name: Get Source Code
        run: |
          package=PyYAML
          if [ "${{ github.event_name }}" = "schedule" ]; then
            version="latest"
          else
            version=${{ github.event.inputs.version }}
          fi
          if [ "$version" = "latest" ]; then
            version=$(curl -sSL "https://pypi.org/pypi/${package}/json" | jq -r '.info.version')
          fi
          echo "Building package: ${package} version: ${version}"
          echo "PIP_EXTRA_INDEX_URL=https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple" >> $GITHUB_ENV

          if curl "https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple/${package/./-}" | grep -oP '(?<=>)[^<]+\.whl' | grep -q "pyyaml-${version}-.*-${{ matrix.build }}.*_${{ matrix.arch }}.whl"; then
            echo "Package ${package} ${version} already exists"
            echo "BUILD=false" >> $GITHUB_ENV
            exit 0
          fi

          full_json=$(curl -sSL "https://pypi.org/pypi/${package}/${version}/json")
          download_url=$(echo "$full_json" | jq -r '.urls[] | select(.packagetype=="sdist").url')
          if [ -z "$download_url" ]; then
              echo "No source found for package ${package} version ${version}"
              exit 1
          fi

          mkdir pyyaml
          wget -O - "$download_url" | tar xz --strip-components=1 -C pyyaml

          if [ -f "pyyaml/packaging/build/libyaml.sh" ]; then
            cp -R pyyaml/packaging packaging
          else
            mkdir -p packaging/build
            wget -qO packaging/build/libyaml.sh https://github.com/yaml/pyyaml/raw/refs/heads/main/packaging/build/libyaml.sh
          fi
          chmod +x packaging/build/libyaml.sh

          sed -i 's@make test-all@# make test-all@' packaging/build/libyaml.sh
          sed -i 's@free-threaded-support = true@# free-threaded-support = true@g' pyyaml/pyproject.toml

      - name: Check cached libyaml state
        if: env.BUILD != 'false'
        id: cached_libyaml
        uses: actions/cache@v4
        with:
          path: libyaml
          key: libyaml_${{ matrix.platform }}_${{ matrix.arch }}_${{ env.LIBYAML_REF }}

      - name: Setup QEMU
        if: env.BUILD != 'false'
        uses: docker/setup-qemu-action@v3

      - name: Build libyaml
        if: env.BUILD != 'false' && steps.cached_libyaml.outputs.cache-hit != 'true'
        run: |
          if [ "${{ matrix.build }}" = "manylinux_" ]; then
            DOCKER_IMAGE="ghcr.io/loong64/${{ matrix.platform }}_${{ matrix.arch }}"
            DOCKER_CMD="yum install -y perl-Test-Harness && /io/packaging/build/libyaml.sh"
          fi
          if [ "${{ matrix.build }}" = "musllinux_" ]; then
            DOCKER_IMAGE="ghcr.io/loong64/alpine:3.21"
            DOCKER_CMD="apk add perl-utils bash git gcc libtool make automake autoconf musl-dev && /io/packaging/build/libyaml.sh"
          fi

          docker run --rm \
            --volume "$(pwd):/io" \
            --env LIBYAML_REF \
            --env LIBYAML_REPO \
            --workdir /io \
            $DOCKER_IMAGE \
            sh -c "$DOCKER_CMD"

      - name: ensure output is world readable (or cache fill fails with Permission Denied)
        if: env.BUILD != 'false' && steps.cached_libyaml.outputs.cache-hit != 'true'
        run: >
          sudo chmod -R a+r ./libyaml/

      - name: Build wheels
        if: env.BUILD != 'false'
        env:
          CIBW_ARCHS: "${{ matrix.arch }}"
          CIBW_BUILD: "*-${{ matrix.build }}${{ matrix.arch }}"
          # CIBW_BUILD_VERBOSITY: 1
          CIBW_ENVIRONMENT_PASS_LINUX: PIP_EXTRA_INDEX_URL
          CIBW_ENVIRONMENT: >
            LD_LIBRARY_PATH=../libyaml/src/.libs
            PYYAML_FORCE_CYTHON=1
            PYYAML_FORCE_LIBYAML=1
          CIBW_TEST_COMMAND: cd {project}; pytest
          CIBW_TEST_REQUIRES: pytest
        run: |
          set -eux

          python3 -V
          python3 -m pip install -U --user cibuildwheel -i https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple

          cat << 'EOF' > build_config.toml
          [tool.cibuildwheel.config-settings]
          pyyaml_build_config='{"force":1, "library_dirs": ["../libyaml/src/.libs"], "include_dirs": ["../libyaml/include"]}'
          EOF

          CIBW_BEFORE_BUILD="ls -l {project}" python3 -m cibuildwheel --config-file $(pwd)/build_config.toml --platform auto --output-dir ./wheelhouse ./pyyaml

      - name: Check wheel
        run: |
          ls -al wheelhouse/*.whl || exit 0
          echo "upload=true" >> $GITHUB_ENV

      - name: Upload wheels
        if: env.upload == 'true'
        run: |
          pip install twine==6.0.1
          for file in wheelhouse/*.whl; do
            twine upload --repository-url https://gitlab.com/api/v4/projects/65746188/packages/pypi $file || true
          done
        env:
          TWINE_USERNAME: ${{ github.repository_owner }}
          TWINE_PASSWORD: ${{ secrets.GL_TOKEN }}