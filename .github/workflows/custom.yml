name: Custom Build Package

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Package name to build'
        required: true
      app_version:
        description: 'Package version pattern'
        required: true
        default: ''

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.get-versions.outputs.versions }}
    steps:
      - name: Get versions
        id: get-versions
        run: |
          package=${{ github.event.inputs.app_name }}
          version=${{ github.event.inputs.app_version }}
          if [ "${version}" = "latest" ]; then
            versions=$(curl -sSL "https://pypi.org/pypi/${package}/json" | \
              jq -r '.info.version' | \
              jq -R -s -c 'split("\n")[:-1]')
          else
            versions=$(curl -sSL "https://pypi.org/pypi/${package}/json" | \
              jq -r '.releases | keys | .[]' | \
              grep "^${version}" | \
              grep -E '^[0-9]+(\.[0-9]+)*$' | \
              jq -R -s -c 'split("\n")[:-1]')
          fi
          echo "versions=$versions" >> $GITHUB_OUTPUT
          echo "Found versions: $versions"

  build:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.prepare.outputs.versions) }}
    name: 'Build ${{ github.event.inputs.app_name }} ${{ matrix.version }}'
    runs-on: ubuntu-latest
    steps:
      - name: Check build
        run: |
          if curl -sSL "https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple/${{ github.event.inputs.app_name }}" | grep "${{ github.event.inputs.app_name }}-${{ matrix.version }}" | grep -q "loongarch64"; then
            echo "BUILD=false" >> $GITHUB_ENV
          fi
      - name: Build Package
        if: env.BUILD != 'false'
        uses: loong64/pypi@master
        with:
          app_name: ${{ github.event.inputs.app_name }}
          app_version: ${{ matrix.version }}

      - name: Upload wheels
        if: always() && env.BUILD != 'false'
        run: |
          pip install twine
          twine upload --repository-url https://gitlab.com/api/v4/projects/65746188/packages/pypi wheelhouse/*.whl
        env:
          TWINE_USERNAME: ${{ github.repository_owner }}
          TWINE_PASSWORD: ${{ secrets.GL_TOKEN }}
