name: build (scipy-openblas-custom)

on:
  workflow_dispatch:
    inputs:
      version:
        default: 'latest'
        description: 'Package version'
        type: string
        required: true

env:
  REPO_DIR: OpenBLAS

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        PLAT: [loongarch64]
        INTERFACE64: ['0', '1']
        MB_ML_VER: ['_2_38']
        MB_ML_LIBC: ['manylinux']
        include:
          - os: ubuntu-24.04
            PLAT: loongarch64
            INTERFACE64: '1'
            MB_ML_LIBC: musllinux
            MB_ML_VER: _1_2
          - os: ubuntu-24.04
            PLAT: loongarch64
            INTERFACE64: '0'
            MB_ML_LIBC: musllinux
            MB_ML_VER: _1_2
    env:
      NIGHTLY: false
      MB_ML_LIBC: ${{ matrix.MB_ML_LIBC }}
      MB_ML_VER: ${{ matrix.MB_ML_VER }}
      INTERFACE64: ${{ matrix.INTERFACE64 }}
      BUILD_DIR: ${{ github.workspace }}
      PLAT: ${{ matrix.PLAT }}

    steps:
      - name: Get Version
        run: |
          case ${{ matrix.INTERFACE64 }} in
            0) pkg="scipy-openblas32" ;;
            1) pkg="scipy-openblas64" ;;
          esac

          app_version=${{ github.event.inputs.version }}
          if [ "$app_version" = "latest" ]; then
            app_version=$(curl -sSL "https://pypi.org/pypi/${package}/json" | jq -r '.info.version')
          fi
          if [ -z "${app_version}" ] || [ "${app_version}" == "null" ]; then
            echo "Failed to get the latest version"
            exit 1
          fi

          if curl "https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple/${pkg}" | grep -oP '(?<=>)[^<]+\.whl' | grep -q ""${app_version/v/}-.*-${{ matrix.MB_ML_LIBC }}_.*_${{ matrix.PLAT }}.whl""; then
            echo "Package ${pkg} ${app_version/v/} already exists"
            echo "BUILD=false" >> $GITHUB_ENV
            exit 0
          fi

          openblas_version=$(echo ${app_version} | awk -F. '{print $1"."$2"."$3}')
          echo "APP_VERSION=${app_version}" >> $GITHUB_ENV
          echo "OPENBLAS_COMMIT=${openblas_version}" >> $GITHUB_ENV

          echo ""
          echo "========== Build Args =========="
          echo "APP_VERSION=${app_version}"
          echo "OPENBLAS_COMMIT=${openblas_version}"

      - name: Checkout Code
        if: env.BUILD != 'false'
        uses: actions/checkout@v4
        with:
          repository: loong64/openblas-libs
          ref: ${{ env.APP_VERSION }}
          submodules: recursive
          fetch-depth: 0

      - name: Setup QEMU
        if: env.BUILD != 'false'
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Python
        if: env.BUILD != 'false'
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install VirtualEnv
        if: env.BUILD != 'false'
        run: |
          python3 -m pip install --upgrade pip
          pip install virtualenv

      - name: Build OpenBLAS
        if: env.BUILD != 'false'
        run: |
          sed -i 's@quay.io/pypa@ghcr.io/loong64@g' tools/build_steps.sh
          echo -n > OpenBLAS/utest/test_kernel_regress.c
          if [[ "${{ matrix.MB_ML_LIBC }}" = "musllinux" ]]; then
            mkdir -p patches
            wget -qO patches/0001-fix-loongarch64-musllinux-test.patch https://github.com/loong64/openblas-libs/raw/refs/heads/patch_loong64/patches/0001-fix-loongarch64-musllinux-test.patch
          fi
          set -xeo pipefail
          source tools/build_steps.sh
          echo "------ BEFORE BUILD ---------"
          before_build
          if [[ "$NIGHTLY" = "true" ]]; then
            echo "------ CLEAN CODE --------"
            clean_code $REPO_DIR develop
            echo "------ BUILD LIB --------"
            build_lib "$PLAT" "$INTERFACE64" "1"
          else
            echo "------ CLEAN CODE --------"
            clean_code $REPO_DIR $OPENBLAS_COMMIT
            echo "------ BUILD LIB --------"
            build_lib "$PLAT" "$INTERFACE64" "0"
          fi

      - name: Build and test wheel
        if: env.BUILD != 'false'
        run: |
          if [[ "$NIGHTLY" = "true" ]]; then
            # Set the pyproject.toml version: convert v0.3.24-30-g138ed79f to 0.3.34.30
            version=$(cd OpenBLAS && git describe --tags --abbrev=8 | sed -e "s/^v\(.*\)-g.*/\1/" | sed -e "s/-/./g")
            sed -e "s/^version = .*/version = \"${version}\"/" -i.bak pyproject.toml
          fi
          if [ "macos-13" == "${{ matrix.os }}" ]; then
            source tools/build_wheel.sh
          else
            libc=${MB_ML_LIBC:-manylinux}
            docker_image=ghcr.io/loong64/${libc}${MB_ML_VER}_${PLAT}
            docker run --rm -e INTERFACE64="${INTERFACE64}" \
              -e MB_ML_LIBC="${MB_ML_LIBC}" \
              -v $(pwd):/openblas $docker_image \
              /bin/bash -xe /openblas/tools/build_wheel.sh
            sudo chmod -R a+w dist
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.PLAT }}-${{ matrix.INTERFACE64 }}-${{ matrix.MB_ML_LIBC }}-${{ matrix.MB_ML_VER }}
          path: dist/scipy_openblas*.whl

      - uses: actions/upload-artifact@v4
        with:
          name: openblas-${{ matrix.os }}-${{ matrix.PLAT }}-${{ matrix.INTERFACE64 }}-${{ matrix.MB_ML_LIBC }}-${{ matrix.MB_ML_VER }}
          path: libs/openblas*.tar.gz

      - name: Upload wheels
        if: env.BUILD != 'false'
        run: |
          pip install twine==6.0.1
          twine upload --repository-url https://gitlab.com/api/v4/projects/65746188/packages/pypi dist/*.whl
        env:
          TWINE_USERNAME: ${{ github.repository_owner }}
          TWINE_PASSWORD: ${{ secrets.GL_TOKEN }}