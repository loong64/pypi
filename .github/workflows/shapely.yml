name: build (shapely)

on:
  workflow_dispatch:
    inputs:
      version:
        default: 'latest'
        description: 'Package version'
        type: string
        required: true
  schedule:
    - cron: '0 17 * * *'

jobs:
  build_wheels:
    name: Build ${{ matrix.build }}${{ matrix.arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-24.04' ]
        arch: [ 'loongarch64' ]
        build: [ "manylinux_", "musllinux_" ]

    steps:
      - name: Get Source Code
        run: |
          package=shapely
          if [ "${{ github.event_name }}" = "schedule" ]; then
            version="latest"
          else
            version=${{ github.event.inputs.version }}
          fi
          if [ "$version" = "latest" ]; then
            version=$(curl -sSL "https://pypi.org/pypi/${package}/json" | jq -r '.info.version')
          fi
          echo "Building package: ${package} version: ${version}"
          echo "PIP_EXTRA_INDEX_URL=https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple" >> $GITHUB_ENV

          check_file="${package}-${version}-.*-${{ matrix.build }}.*_${{ matrix.arch }}.whl"
          if curl "https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple/${package/./-}" | grep -oP '(?<=>)[^<]+\.whl' | grep -q "${check_file}"; then
            echo "Package ${package} ${version} already exists"
            echo "BUILD=false" >> $GITHUB_ENV
            exit 0
          fi

          full_json=$(curl -sSL "https://pypi.org/pypi/${package}/${version}/json")
          download_url=$(echo "$full_json" | jq -r '.urls[] | select(.packagetype=="sdist").url')
          if [ -z "$download_url" ]; then
              echo "No source found for package ${package} version ${version}"
              exit 1
          fi
          wget -O - "$download_url" | tar xz --strip-components=1

          mkdir -p ci/wheelbuilder
          wget -qO ci/Dockerfile https://github.com/shapely/shapely/raw/refs/tags/${version}/ci/Dockerfile
          wget -qO ci/wheelbuilder/LICENSE_GEOS https://github.com/shapely/shapely/raw/refs/tags/${version}/ci/wheelbuilder/LICENSE_GEOS

          case "${{ matrix.build }}" in
            manylinux_)
              echo "BASEIMAGE=ghcr.io/loong64/manylinux_2_38_loongarch64" >> $GITHUB_ENV
              echo "TAGS=ghcr.io/loong64/manylinux_2_38_loongarch64_geos:latest" >> $GITHUB_ENV
              ;;
            musllinux_)
              echo "BASEIMAGE=ghcr.io/loong64/musllinux_1_2_loongarch64" >> $GITHUB_ENV
              echo "TAGS=ghcr.io/loong64/musllinux_1_2_loongarch64_geos:latest" >> $GITHUB_ENV
              ;;
          esac

      - name: Setup QEMU
        if: env.BUILD != 'false'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: env.BUILD != 'false'
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image with GEOS
        if: env.BUILD != 'false'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ci/Dockerfile
          platforms: linux/loong64
          tags: ${{ env.TAGS }}
          build-args: |
            BASEIMAGE=${{ env.BASEIMAGE }}
          push: false
          load: true
          cache-from: type=gha,scope=manylinux_2_38_loongarch64
          cache-to: type=gha,mode=max,scope=manylinux_2_38_loongarch64

      - name: Add GEOS LICENSE
        if: env.BUILD != 'false'
        run: cp ci/wheelbuilder/LICENSE_GEOS .

      - name: Build wheels
        if: env.BUILD != 'false'
        uses: loong64/cibuildwheel@v3.2.0
        env:
          CIBW_ARCHS: "${{ matrix.arch }}"
          CIBW_BUILD: "*-${{ matrix.build }}${{ matrix.arch }}"
          CIBW_ENVIRONMENT_LINUX: LD_LIBRARY_PATH=/usr/local/lib64:$LD_LIBRARY_PATH
          CIBW_ENVIRONMENT_PASS_LINUX: PIP_EXTRA_INDEX_URL
          
          CIBW_MANYLINUX_LOONGARCH64_IMAGE: ghcr.io/loong64/manylinux_2_38_loongarch64_geos:latest
          CIBW_MUSLLINUX_LOONGARCH64_IMAGE: ghcr.io/loong64/musllinux_1_2_loongarch64_geos:latest

      - name: Check wheel
        run: |
          ls -al wheelhouse/*.whl || exit 0
          echo "upload=true" >> $GITHUB_ENV

      - name: Upload wheels
        if: env.upload == 'true'
        run: |
          pip install twine==6.0.1
          for file in wheelhouse/*.whl; do
            twine upload --repository-url https://gitlab.com/api/v4/projects/65746188/packages/pypi $file || true
          done
        env:
          TWINE_USERNAME: ${{ github.repository_owner }}
          TWINE_PASSWORD: ${{ secrets.GL_TOKEN }}