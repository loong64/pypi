name: build (orjson)

on:
  workflow_dispatch:
    inputs:
      version:
        default: 'latest'
        description: 'Package version'
        type: string
        required: true
  schedule:
    - cron: '0 17 * * *'

env:
  CARGO_UNSTABLE_SPARSE_REGISTRY: "true"
  FORCE_COLOR: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  RUST_TOOLCHAIN: "nightly-2025-08-10"
  UNSAFE_PYO3_BUILD_FREE_THREADED: "1"
  UNSAFE_PYO3_SKIP_VERSION_CHECK: "1"
  UV_LINK_MODE: "copy"

jobs:
  manylinux_cross:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: [
          { interpreter: 'python3.14', abi: 'cp314-cp314', manylinux: 'manylinux_2_36', publish: true },
          { interpreter: 'python3.13', abi: 'cp313-cp313', manylinux: 'manylinux_2_36', publish: true },
          { interpreter: 'python3.12', abi: 'cp312-cp312', manylinux: 'manylinux_2_36', publish: true },
          { interpreter: 'python3.11', abi: 'cp311-cp311', manylinux: 'manylinux_2_36', publish: true },
          { interpreter: 'python3.10', abi: 'cp310-cp310', manylinux: 'manylinux_2_36', publish: true },
          { interpreter: 'python3.9', abi: 'cp39-cp39', manylinux: 'manylinux_2_36', publish: true },
        ]
        target: [
          {
            arch: 'loongarch64',
            cflags: '-Os -fstrict-aliasing',
            features: 'yyjson',
            rustflags: '-Z mir-opt-level=4 -C lto=fat -D warnings',
            target: 'loongarch64-unknown-linux-gnu',
          },
        ]


    steps:
      - name: Get Source Code
        run: |
          package=orjson
          if [ "${{ github.event_name }}" = "schedule" ]; then
            version="latest"
          else
            version=${{ github.event.inputs.version }}
          fi
          if [ "$version" = "latest" ]; then
            version=$(curl -sSL "https://pypi.org/pypi/${package}/json" | jq -r '.info.version')
          fi
          echo "Building package: ${package} version: ${version}"
          echo "PIP_EXTRA_INDEX_URL=https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple" >> $GITHUB_ENV

          check_file="${package}-${version}-.*-manylinux_2_36_loongarch64.whl"
          if curl "https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple/${package/./-}" | grep -oP '(?<=>)[^<]+\.whl' | grep -q "${check_file}"; then
            echo "Package ${package} ${version} already exists"
            echo "BUILD=false" >> $GITHUB_ENV
            exit 0
          fi

          echo "VERSION=${version}" >> $GITHUB_ENV

      - name: Checkout
        if: env.BUILD != 'false'
        uses: actions/checkout@v4
        with:
          repository: ijl/orjson
          ref: ${{ env.VERSION }}

      - name: build-std
        if: env.BUILD != 'false'
        run: |
          mkdir .cargo
          cp ci/config.toml .cargo/config.toml

      - name: Build
        if: env.BUILD != 'false'
        uses: loong64/maturin-action@main
        env:
          PYO3_CROSS_LIB_DIR: "/opt/python/${{ matrix.python.abi }}"
          CFLAGS: "${{ matrix.target.cflags }}"
          LDFLAGS: "-Wl,--as-needed"
          RUSTFLAGS: "${{ matrix.target.rustflags }}"
        with:
          target: "${{ matrix.target.target }}"
          rust-toolchain: "${{ env.RUST_TOOLCHAIN }}"
          rustup-components: rust-src
          manylinux: "${{ matrix.python.manylinux }}"
          args: --release --strip --out=dist --features=${{ matrix.target.features }} -i ${{ matrix.python.interpreter }}

      - name: Check wheel
        run: |
          ls -al dist/*.whl || exit 0
          echo "upload=true" >> $GITHUB_ENV

      - name: Upload wheels
        if: env.upload == 'true'
        run: |
          pip install twine==6.0.1
          for file in dist/*.whl; do
            twine upload --repository-url https://gitlab.com/api/v4/projects/65746188/packages/pypi $file || true
          done
        env:
          TWINE_USERNAME: ${{ github.repository_owner }}
          TWINE_PASSWORD: ${{ secrets.GL_TOKEN }}