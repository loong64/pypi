name: build (PyNaCl)

on:
  workflow_dispatch:
    inputs:
      version:
        default: 'latest'
        description: 'Package version'
        type: string
        required: true
  schedule:
    - cron: '0 17 * * *'

jobs:
  manylinux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        PYTHON:
          - { VERSION: "cp311", ABI_VERSION: 'cp37'}
        

    steps:
      - name: Get Source Code
        run: |
          package=PyNaCl
          if [ "${{ github.event_name }}" = "schedule" ]; then
            version="latest"
          else
            version=${{ github.event.inputs.version }}
          fi
          if [ "$version" = "latest" ]; then
            version=$(curl -sSL "https://pypi.org/pypi/${package}/json" | jq -r '.info.version')
          fi
          echo "Building package: ${package} version: ${version}"
          echo "PIP_EXTRA_INDEX_URL=https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple" >> $GITHUB_ENV

          # pynacl-1.5.0-cp37-abi3-manylinux_2_36_loongarch64.manylinux_2_38_loongarch64.whl
          # pynacl-1.5.0-cp37-abi3-musllinux_1_2_loongarch64.whl
          check_file="pynacl-${version}-.*_loongarch64.whl"
          if curl "https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple/${package/./-}" | grep -oP '(?<=>)[^<]+\.whl' | grep -q "${check_file}"; then
            echo "Package ${package} ${version} already exists"
            echo "BUILD=false" >> $GITHUB_ENV
            exit 0
          fi

          full_json=$(curl -sSL "https://pypi.org/pypi/${package}/${version}/json")
          download_url=$(echo "$full_json" | jq -r '.urls[] | select(.packagetype=="sdist").url')
          if [ -z "$download_url" ]; then
              echo "No source found for package ${package} version ${version}"
              exit 1
          fi
          wget -O - "$download_url" | tar xz --strip-components=1

      - name: Setup QEMU
        if: env.BUILD != 'false'
        uses: docker/setup-qemu-action@v3

      - name: Build wheels
        if: env.BUILD != 'false'
        uses: loong64/cibuildwheel@main
        env:
          CIBW_ARCHS: loongarch64
          CIBW_BUILD: "${{ matrix.PYTHON.VERSION }}-*"
          CIBW_BUILD_FRONTEND: "build; args: --config-setting=--build-option=--py-limited-api=${{ matrix.PYTHON.ABI_VERSION }}"
          CIBW_ENVIRONMENT_LINUX: >
            LIBSODIUM_MAKE_ARGS="-j4"
          CIBW_ENVIRONMENT_PASS_LINUX: PIP_EXTRA_INDEX_URL
          CIBW_MANYLINUX_LOONGARCH64_IMAGE: "ghcr.io/loong64/cryptography-manylinux_2_38:loongarch64"
          CIBW_MUSLLINUX_LOONGARCH64_IMAGE: "ghcr.io/loong64/cryptography-musllinux_1_2:loongarch64"

      - name: Check wheel
        run: |
          ls -al wheelhouse/*.whl || exit 0
          echo "upload=true" >> $GITHUB_ENV

      - name: Upload wheels
        if: env.upload == 'true'
        run: |
          pip install twine==6.0.1
          for file in wheelhouse/*.whl; do
            twine upload --repository-url https://gitlab.com/api/v4/projects/65746188/packages/pypi $file || true
          done
        env:
          TWINE_USERNAME: ${{ github.repository_owner }}
          TWINE_PASSWORD: ${{ secrets.GL_TOKEN }}