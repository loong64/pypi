name: 'Build Any Package'
description: 'Build any Python package for loongarch64'

inputs:
  app_name:
    description: 'Package name to build'
    required: true
  app_version:
    description: 'Package version'
    required: false
    default: 'latest'
  app_arch:
    description: 'Package architecture'
    required: false
    default: 'loongarch64'
  app_platform:
    description: 'Package platform'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Checkout tools
      shell: bash
      run: |
        mkdir -p /tmp/tools /tmp/cache
        wget -O - https://github.com/loong64/pypi/archive/refs/heads/master.tar.gz | tar xz --strip-components=1 -C /tmp/tools

    - name: Check environment
      shell: bash
      run: |
        CIBW_ENVIRONMENT_CUSTOM=""
        CIBW_PROJECT_REQUIRES_PYTHON=""
        if [ -f "/tmp/tools/project/${{ inputs.app_name }}/env" ]; then
          CIBW_ENVIRONMENT_CUSTOM=$(cat "/tmp/tools/project/${{ inputs.app_name }}/env")
        fi
        if [ -f "/tmp/tools/project/${{ inputs.app_name }}/${{ inputs.app_version }}/env" ]; then
          CIBW_ENVIRONMENT_CUSTOM=$(cat "/tmp/tools/project/${{ inputs.app_name }}/${{ inputs.app_version }}/env")
        fi
        if [ -f "/tmp/tools/project/${{ inputs.app_name }}/python" ]; then
          CIBW_PROJECT_REQUIRES_PYTHON=$(cat "/tmp/tools/project/${{ inputs.app_name }}/python")
        fi
        if [ -f "/tmp/tools/project/${{ inputs.app_name }}/${{ inputs.app_version }}/python" ]; then
          CIBW_PROJECT_REQUIRES_PYTHON=$(cat "/tmp/tools/project/${{ inputs.app_name }}/${{ inputs.app_version }}/python")
        fi
        echo "CIBW_ENVIRONMENT_CUSTOM=${CIBW_ENVIRONMENT_CUSTOM}" >> $GITHUB_ENV
        echo "CIBW_PROJECT_REQUIRES_PYTHON=${CIBW_PROJECT_REQUIRES_PYTHON}" >> $GITHUB_ENV

    - name: Check Build
      shell: bash
      run: |
        package=${{ inputs.app_name }}
        version=${{ inputs.app_version }}
        platform=${{ inputs.app_platform }}
        if [ "$version" = "latest" ]; then
          version=$(curl -sSL "https://pypi.org/pypi/${package}/json" | jq -r '.info.version')
        fi
        echo "Building package: ${package} version: ${version}"

        if [ -n "${platform}" ]; then
          platform_pattern="${platform%_*}"
          if curl "https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple/${package/./-}" | grep "${version}" | grep "${platform_pattern}" | grep -q "loongarch64"; then
            echo "Package ${package} ${version} already exists"
            echo "BUILD=false" >> $GITHUB_ENV
            exit 0
          fi
        else
          if curl "https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple/${package/./-}" | grep "${version}" | grep -q "loongarch64"; then
            echo "Package ${package} ${version} already exists"
            echo "BUILD=false" >> $GITHUB_ENV
            exit 0
          fi
        fi

        full_json=$(curl -sSL "https://pypi.org/pypi/${package}/${version}/json")
        
        CIBW_BUILD=""
        if echo "$full_json" | jq -r '.urls[] | .filename' | egrep -q "abi3-manylinux|py3-none-manylinux"; then
          CIBW_BUILD="cp39-manylinux_*"
        fi
        if [ -f "/tmp/tools/project/${package}/noabi3" ] || [ -f "/tmp/tools/project/${package}/${version}/noabi3" ]; then
          CIBW_BUILD=""
        fi
        if [ -n "${platform}" ]; then
          CIBW_BUILD="${platform}"
        fi
        echo "CIBW_BUILD=${CIBW_BUILD}" >> $GITHUB_ENV

        download_url=$(echo "$full_json" | jq -r '.urls[] | select(.packagetype=="sdist").url')
        if [ -z "$download_url" ]; then
          if [ ! -f /tmp/tools/project/${package}/${version}/get_source.sh ]; then
            echo "No source found for package ${package} version ${version}"
            exit 1
          fi
          download_url=$(bash /tmp/tools/project/${package}/${version}/get_source.sh)
        fi
        wget -O - "$download_url" | tar xz --strip-components=1

    - name: Setup QEMU
      if: env.BUILD != 'false'
      shell: bash
      run: docker run --rm --privileged ghcr.io/loong64/qemu-user-static --reset -p yes

    - name: Check Custom Build
      if: env.BUILD != 'false'
      shell: bash
      run: |
        if [ -f /tmp/tools/project/${{ inputs.app_name }}/scripts/prepare.sh ]; then
          prepare_script="/tmp/tools/project/${{ inputs.app_name }}/scripts/prepare.sh"
        fi
        if [ -f /tmp/tools/project/${{ inputs.app_name }}/${{ inputs.app_version }}/scripts/prepare.sh ]; then
          prepare_script="/tmp/tools/project/${{ inputs.app_name }}/${{ inputs.app_version }}/scripts/prepare.sh"
        fi
        if [ -f "$prepare_script" ]; then
          bash "$prepare_script"
        fi

    - name: Build wheels
      if: env.BUILD != 'false'
      uses: loong64/cibuildwheel@main
      env:
        CIBW_MANYLINUX_LOONGARCH64_IMAGE: manylinux_2_38
        CIBW_ARCHS: ${{ inputs.app_arch }}
        CIBW_BUILD: ${{ env.CIBW_BUILD }}
        CIBW_SKIP: "pp* *-musllinux_*"
        CIBW_TEST_SKIP: "*"
        CIBW_PROJECT_REQUIRES_PYTHON: ${{ env.CIBW_PROJECT_REQUIRES_PYTHON }}
        CIBW_BEFORE_ALL_LINUX: >
          if [ -f /host/tmp/tools/build-ci.sh ]; then bash /host/tmp/tools/build-ci.sh; fi
        CIBW_ENVIRONMENT_LINUX: >
          USE_CCACHE=1
          APP_NAME=${{ inputs.app_name }}
          APP_VERSION=${{ inputs.app_version }}
          PATH="$HOME/.cargo/bin:$PATH"
          PIP_EXTRA_INDEX_URL="https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple"
          ${{ env.CIBW_ENVIRONMENT_CUSTOM }}
